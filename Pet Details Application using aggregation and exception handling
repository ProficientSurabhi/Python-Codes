{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nHomework - 4\\n\\nPet Inventory Application\\n\\nName: Sowmya Suresh, Surabhi Sharma\\nNetID: SXS180027, \\n\\n'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "Homework - 4\n",
    "\n",
    "Pet Inventory Application\n",
    "\n",
    "Name: Sowmya Suresh, Surabhi Sharma\n",
    "NetID: SXS180027, \n",
    "\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "This cell contains all the class definitions of the program\n",
    "'''\n",
    "# Person Class\n",
    "class Person:\n",
    "    def __init__(self,oName, oAddr): #init method : initializing attributes of Person class\n",
    "        self._owner_name = oName\n",
    "        self._owner_address = oAddr\n",
    "        \n",
    "    # Getters and setters \n",
    "    def get_owner_name(self):\n",
    "        return self._owner_name\n",
    "    \n",
    "    def get_owner_address(self):\n",
    "        return self._owner_address\n",
    "    \n",
    "    def set_owner_name(self,oName):\n",
    "        self._owner_name = oName\n",
    "        \n",
    "    def set_owner_address(self, oAddr):\n",
    "        self._owner_address = oAddr\n",
    "        \n",
    "    def get_owner_data(self): # This function returns the details of owners\n",
    "        return ('Owner name: ' + str(self._owner_name) + ', Owner address: ' + str(self._owner_address))\n",
    "\n",
    "\n",
    "# Base class Pet\n",
    "class Pet:\n",
    "    def __init__(self, pname, age, bwt, owner): #init method : initializing attributes of Pet class\n",
    "        self._pet_name = pname\n",
    "        self._pet_age = age\n",
    "        self._birth_weight = bwt\n",
    "        self._owner = owner\n",
    "        \n",
    "    # Getters and setters\n",
    "    def get_pet_name(self):\n",
    "        return self._pet_name\n",
    "\n",
    "    def get_pet_age(self):\n",
    "        return self._pet_age\n",
    "    \n",
    "    def get_birth_weight(self):\n",
    "        return self._birth_weight\n",
    "\n",
    "    def get_owner(self):\n",
    "        return self._owner\n",
    "\n",
    "    def set_pet_name(self, pname):\n",
    "        self._pet_name = pname\n",
    "    \n",
    "    def set_pet_age(self, age):\n",
    "        self._pet_age = age\n",
    "        \n",
    "    def set_birth_weight(self, bwt):\n",
    "        self._birth_weight = bwt\n",
    "\n",
    "    def __str__(self): # This function returns all the details of Pets\n",
    "        pet_details = 'Pet Name: ' + self._pet_name + ', Pet Age: ' + str(self._pet_age)  + ', birth weight: '  + str(self._birth_weight)  + ', ' + self._owner.get_owner_data()\n",
    "        return pet_details\n",
    "    \n",
    "# Child Class Mammal\n",
    "class Mammal(Pet):\n",
    "    def __init__(self, pname, age, bwt, owner, lsize, hClaws): #init method : initializing attributes of Mammal class\n",
    "        super().__init__(pname, age, bwt, owner) #initializing the instance variables of the base class Pet\n",
    "        self._litter_size = lsize\n",
    "        self._hasClaws = hClaws\n",
    "        \n",
    "    # Getters and setters    \n",
    "    def get_litter_size(self):\n",
    "        return self._litter_size\n",
    "\n",
    "    def get_hasClaws(self):\n",
    "        return self._hasClaws\n",
    "    \n",
    "    def set_litter_size(self, lsize):\n",
    "        self._litter_size = lsize\n",
    "    \n",
    "    def set_hasClaws(self, hClaws):\n",
    "        self._hasClaws = hClaws\n",
    "        \n",
    "    def currentWeight(self, bwt): # Computing and returning the current weight of Mammals\n",
    "        self._cwt = bwt\n",
    "        age_curr = self._pet_age\n",
    "        i = 0\n",
    "        while age_curr > 59:\n",
    "            if i < 5:\n",
    "                self._cwt += 0.10* self._cwt\n",
    "            else:\n",
    "                self._cwt = self._cwt\n",
    "            i = i + 1\n",
    "            age_curr = age_curr - 120\n",
    "        return str(self._pet_name) + ' weighs ' + str(round(self._cwt)) + ' pounds'\n",
    "            \n",
    "    def __str__(self):  # This function returns all the details of Mammals\n",
    "        print(\"Details of this mammal pet are:\")\n",
    "        op = super().__str__() #we call the parent class's __str__method first.\n",
    "        op += ', litter size: ' + str(self._litter_size) + ', Has Claws?: '+ str(self._hasClaws) + \"\\n\"\n",
    "        return op\n",
    "            \n",
    "# Child Class Fish        \n",
    "class Fish(Pet):  #init method : initializing attributes of Fish class\n",
    "    def __init__(self, pname, age, bwt, owner, scale, leng):\n",
    "        super().__init__(pname, age, bwt, owner) #initializing the instance variables of the base class Pet\n",
    "        self._scale_condition = scale\n",
    "        self._length = leng\n",
    "    \n",
    "    # Getters and setters    \n",
    "    def get_scale_condition(self):\n",
    "        return self._scale_condition\n",
    "    \n",
    "    def get_length(self):\n",
    "        return self._length\n",
    "       \n",
    "    def set_scale_condition(self, scale):\n",
    "        self._scale_condition = scale\n",
    "    \n",
    "    def set_length(self, leng):\n",
    "        self._length = leng\n",
    "        \n",
    "    def currentWeight(self, bwt): # Computing and returning the current weight of Fishes\n",
    "        \n",
    "        self._cwt = bwt\n",
    "        age_curr = self._pet_age\n",
    "        i = 0\n",
    "        while age_curr > 79:\n",
    "            if i < 3:\n",
    "                self._cwt += 0.05* self._cwt\n",
    "            else:\n",
    "                self._cwt = self._cwt\n",
    "            i = i + 1\n",
    "            age_curr = age_curr - 120\n",
    "        \n",
    "        return self._pet_name + ' weighs ' + str(round(self._cwt)) + ' pounds' \n",
    "            \n",
    "    def __str__(self):  # This function returns all the details of Fishes \n",
    "        print(\"Details of this Fish pet are:\")\n",
    "        op = super().__str__() #we call the parent class's __str__method first.\n",
    "        op += ', Scale Condition: ' + str(self._scale_condition) + ', Length: '+ str(self._length) + \"\\n\"\n",
    "        return op\n",
    "    \n",
    "\n",
    "# Child Class Amphibian       \n",
    "class Amphibian(Pet): \n",
    "    def __init__(self, pname, age, bwt, owner, isVen): #init method : initializing attributes of Amphibian class\n",
    "        super().__init__(pname, age, bwt, owner) #initializing the instance variables of the base class Pet\n",
    "        self._isVenomous = isVen\n",
    "    \n",
    "    # Getters and setters\n",
    "    def get_isVenomous(self):\n",
    "        return self._isVenomous\n",
    "    \n",
    "    def set_isVenomous(self, isVen):\n",
    "        self._isVenomous = isVen\n",
    "        \n",
    "    def currentWeight(self, bwt):  # Computing and returning the current weight of Amphibians\n",
    "        self._cwt = bwt\n",
    "        age_curr = self._pet_age\n",
    "        i = 0\n",
    "        while age_curr > 119:\n",
    "            if i <= 2:\n",
    "                self._cwt += 0.05* self._cwt\n",
    "            else:\n",
    "                self._cwt += 0.01 * self._cwt\n",
    "            i = i + 1\n",
    "            age_curr = age_curr - 120\n",
    "        \n",
    "        return self._pet_name + ' weighs ' + str(round(self._cwt)) + ' pounds'\n",
    "    \n",
    "    def __str__(self):   # This function returns all the details of Amphibians \n",
    "        print(\"Details of this Amphibian pet are:\")\n",
    "        op = super().__str__() # We call the parent class's __str__method first.\n",
    "        op += ', Is Venomous?: ' + self._isVenomous + \"\\n\"\n",
    "        return op"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "Reading the file petdata.dat\n",
    "'''\n",
    "\n",
    "def read_file():\n",
    "    f = open(\"petdata.dat\", \"r\")\n",
    "    all_pets = [] # initializing an array to store all pet details read from the file\n",
    "    \n",
    "    for line in f:\n",
    "        line_split = line.split(\",\")\n",
    "        if len(line_split) > 1:\n",
    "            owner = Person(line_split[4].split(\": \")[1], line_split[5].split(\": \")[1])\n",
    "            if line_split[0].lower() == 'mammal':\n",
    "                all_pets.append(Mammal(line_split[1].split(\": \")[1].strip(), int(line_split[2].split(\": \")[1].strip()), float(line_split[3].split(\": \")[1].strip()), owner, int(line_split[6].split(\": \")[1].strip()), line_split[7].split(\": \")[1].strip()))\n",
    "            elif line_split[0].lower() == 'fish':\n",
    "                all_pets.append(Fish(line_split[1].split(\": \")[1].strip(), int(line_split[2].split(\": \")[1].strip()), float(line_split[3].split(\": \")[1].strip()), owner, line_split[6].split(\": \")[1].strip(), line_split[7].split(\": \")[1].strip()))\n",
    "            elif line_split[0].lower() == 'amphibian':\n",
    "                all_pets.append(Amphibian(line_split[1].split(\": \")[1].strip(), int(line_split[2].split(\": \")[1].strip()), float(line_split[3].split(\": \")[1].strip()), owner, line_split[6].split(\": \")[1].strip()))\n",
    "            else: \n",
    "                pass\n",
    "    f.close()\n",
    "    return all_pets                     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_common_details():\n",
    "    pname = input(\"Enter the pet's name: \")\n",
    "    try:\n",
    "        age = int(input(\"Enter the pet's age: \"))\n",
    "    except:\n",
    "        print(\"Enter an integer value for age!!\")\n",
    "        print(\"Exiting the progam\")\n",
    "        sys.exit(1)\n",
    "    try:\n",
    "        bwt = float(input(\"Enter the pet's birth weight: \"))\n",
    "    except:\n",
    "        print(\"Enter an float value for birth_weight!!\")\n",
    "        print(\"Exiting the progam\")\n",
    "        sys.exit(2)\n",
    "    oName = input(\"Enter the owner's name: \")\n",
    "    oAddr = input(\"Enter the owner's address: \")\n",
    "    owner = Person(oName,oAddr)\n",
    "    return pname, age, bwt, owner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_a_pet(pet_type):\n",
    "    if pet_type == '1':  # Adding a mammal pet to the inventory      \n",
    "        pname, age, bwt, owner = get_common_details()\n",
    "        try:\n",
    "            lsize = int(input(\"Enter the litter size: \"))\n",
    "        except:\n",
    "            print(\"Enter an int value for birth_weight!!\")\n",
    "            print(\"Exiting the progam\")\n",
    "            sys.exit(1)\n",
    "        hClaws = input(\"Does the pet have claws? Answer 'yes' or 'no': \")\n",
    "        inventory1= list() # initializing inventory list for pet_type 'Mammal'\n",
    "        inventory1.append(\"Mammal, \")\n",
    "        inventory1.append(Mammal(pname, age, bwt, owner, lsize, hClaws))\n",
    "\n",
    "        with open('petdata.dat', 'a') as f: #Writing details of mammal pet entered above to the file petdata.dat\n",
    "            for item in inventory1:\n",
    "                f.write('%s' % item)\n",
    "            f.write('\\n')\n",
    "        f.close()\n",
    "\n",
    "    elif pet_type == '2':  # Adding a Fish pet to the inventory \n",
    "\n",
    "        pname, age, bwt, owner = get_common_details()\n",
    "        try:\n",
    "            leng = float(input(\"Enter the length of the fish in inche: \"))\n",
    "        except:\n",
    "            print(\"Enter an float value for birth_weight!!\")\n",
    "            print(\"Exiting the progam\")\n",
    "            sys.exit(1)\n",
    "        scale = input(\"What is the condition of the scale? Answer 'rough' or 'scaly': \")\n",
    "\n",
    "        inventory2= list() # initializing inventory list for pet_type 'Fish'\n",
    "        inventory2.append(\"Fish, \")\n",
    "        inventory2.append(Fish(pname, age, bwt, owner, scale, leng))\n",
    "\n",
    "        with open('petdata.dat', 'a') as f:  #Writing details of Fish pet entered above to the file petdata.dat\n",
    "            for item in inventory2:\n",
    "                f.write('%s' % item)\n",
    "            f.write('\\n')\n",
    "        f.close()\n",
    "\n",
    "    elif pet_type == '3':  # Adding a Amphibian pet to the inventory \n",
    "        pname, age, bwt, owner = get_common_details()\n",
    "        isVen = input(\"Is the pet Venomous? Answer 'yes' or 'no': \")\n",
    "\n",
    "        inventory3 = list() # initializing inventory list for pet_type 'Amphibian'\n",
    "        inventory3.append(\"Amphibian, \")\n",
    "        inventory3.append(Amphibian(pname, age, bwt, owner, isVen))\n",
    "\n",
    "        with open('petdata.dat', 'a') as f: #Writing details of Amphibian pet entered above to the file petdata.dat\n",
    "            for item in inventory3:\n",
    "                f.write('%s' % item)\n",
    "            f.write('\\n')\n",
    "        f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==== Menu ====\n",
      "1. To add a pet\n",
      "2. To print current weight of all pets\n",
      "3. To print all pets and owners\n",
      "4. To exit program\n",
      "Your selection: 2\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-6-08f867521c0f>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     33\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     34\u001b[0m     \u001b[1;32melif\u001b[0m \u001b[0mchoice\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'2'\u001b[0m\u001b[1;33m:\u001b[0m \u001b[1;31m# Displaying pet name and current weights of all pets in the inventory\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 35\u001b[1;33m         \u001b[0mall_pets\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mread_file\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     36\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mall_pets\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m0\u001b[0m \u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     37\u001b[0m             \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"No pets in inventory\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-2-53320db26de7>\u001b[0m in \u001b[0;36mread_file\u001b[1;34m()\u001b[0m\n\u001b[0;32m     10\u001b[0m         \u001b[0mline_split\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mline\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\",\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mline_split\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 12\u001b[1;33m             \u001b[0mowner\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mPerson\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mline_split\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m4\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\": \"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mline_split\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\": \"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     13\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mline_split\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'mammal'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     14\u001b[0m                 \u001b[0mall_pets\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mMammal\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mline_split\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\": \"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mline_split\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\": \"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mline_split\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\": \"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mowner\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mline_split\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m6\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\": \"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mline_split\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m7\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\": \"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "'''\n",
    "Driver program/ code:\n",
    "\n",
    "This cell contains blocks of code that accepts user inputs, writes pet data to a file and displays all pet details from \n",
    "the file.\n",
    "'''\n",
    "import sys #Note that we import the sys module to take care of abnormal termination of the program\n",
    "\n",
    "while True:\n",
    "    print(\"==== Menu ====\\n1. To add a pet\\n2. To print current weight of all pets\\n3. To print all pets and owners\\n4. To exit program\")\n",
    "    choice = input(\"Your selection: \")\n",
    "    \n",
    "    if choice.isalpha():\n",
    "        print(\"You must enter an iteger!\")\n",
    "        print(\"Try again\")\n",
    "        \n",
    "    elif (choice <= '0') or (choice >= '5'):\n",
    "        print(\"Enter one of the above options only!\")\n",
    "        print(\"Try again\")\n",
    "        \n",
    "    elif choice == '1':\n",
    "        pet_type = input(\"Enter the choice of Pet type (1. Mammal; 2. Fish; 3. Amphibian): \")\n",
    "        if pet_type == '1' or pet_type == '2' or pet_type == '3':\n",
    "            add_a_pet(pet_type)\n",
    "        else:\n",
    "            print(\"Wrong Selection!\")\n",
    "            pet_type = input(\"Enter the choice of Pet type (1. Mammal; 2. Fish; 3. Amphibian): \")\n",
    "            while pet_type != '1' and pet_type != '2' and pet_type != '3':\n",
    "                print(\"Wrong Selection!\")\n",
    "                pet_type = input(\"Enter the choice of Pet type (1. Mammal; 2. Fish; 3. Amphibian): \")\n",
    "            add_a_pet(pet_type)\n",
    "            \n",
    "\n",
    "    elif choice == '2': # Displaying pet name and current weights of all pets in the inventory\n",
    "        all_pets = read_file()\n",
    "        if len(all_pets) == 0 :\n",
    "            print(\"No pets in inventory\")\n",
    "        else:\n",
    "            print(\"Pet name and current weight of all Pets\\n================================\")\n",
    "\n",
    "            for i in all_pets:\n",
    "                print(i.currentWeight(i.get_birth_weight()))\n",
    "\n",
    "\n",
    "    elif choice == '3': # Displaying details of all pets in the inventory\n",
    "\n",
    "        all_pets = read_file()\n",
    "        if len(all_pets) == 0 :\n",
    "            print(\"No pets in inventory\")\n",
    "        else:\n",
    "            for p in all_pets:\n",
    "                print(p)\n",
    "\n",
    "    elif choice == '4': # Exiting the Program\n",
    "        print(\"You choose to exit the program\")\n",
    "        inp_exit = input(\"Are you sure (Y/N)?\").lower()\n",
    "        if  inp_exit == 'y':\n",
    "            break\n",
    "        elif inp_exit == 'n':\n",
    "            pass\n",
    "        else:\n",
    "            pass\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
